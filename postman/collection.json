{
  "info": {
    "name": "Twilio Synthetic Call Data Generator",
    "description": "Postman collection for generating synthetic call data using Twilio Programmable Voice API with AI-powered customer and agent personas",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script: Select random customer and agent personas",
          "",
          "// Set test start time for filtering recordings",
          "if (!pm.environment.get('testStartTime')) {",
          "  const now = new Date();",
          "  const timestamp = now.toISOString().split('.')[0];",
          "  pm.environment.set('testStartTime', timestamp);",
          "  console.log('Test start time:', timestamp);",
          "}",
          "",
          "// Load customer personas (embedded from customers.json)",
          "const customers = [",
          "  pm.environment.get('customers') ? JSON.parse(pm.environment.get('customers')) : []",
          "].flat();",
          "",
          "// Load agent personas (embedded from agents.json)",
          "const agents = [",
          "  pm.environment.get('agents') ? JSON.parse(pm.environment.get('agents')) : []",
          "].flat();",
          "",
          "// Select random customer",
          "if (customers.length > 0) {",
          "  const randomCustomer = customers[Math.floor(Math.random() * customers.length)];",
          "  pm.environment.set('customerName', randomCustomer.CustomerName);",
          "  pm.environment.set('customerPhone', randomCustomer.PhoneNumber);",
          "  pm.environment.set('customerIssue', randomCustomer.Issue);",
          "  pm.environment.set('customerPrompt', randomCustomer.Prompt);",
          "  console.log('Selected customer:', randomCustomer.CustomerName);",
          "}",
          "",
          "// Select random agent",
          "if (agents.length > 0) {",
          "  const randomAgent = agents[Math.floor(Math.random() * agents.length)];",
          "  pm.environment.set('agentName', randomAgent.AgentName);",
          "  pm.environment.set('agentIntroduction', randomAgent.ScriptedIntroduction);",
          "  pm.environment.set('agentCharacteristics', randomAgent.Characteristics);",
          "  console.log('Selected agent:', randomAgent.AgentName);",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Create Conference",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 201 Created', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has success flag and conference ID', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData).to.have.property('conferenceId');",
              "    pm.expect(jsonData.conferenceId).to.be.a('string');",
              "    pm.expect(jsonData.conferenceId).to.match(/^synth-call-\\d+-[a-z0-9]+$/);",
              "    ",
              "    // Save conference ID for subsequent requests",
              "    pm.environment.set('conferenceId', jsonData.conferenceId);",
              "});",
              "",
              "pm.test('Response includes customer and agent participants', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('customer');",
              "    pm.expect(jsonData).to.have.property('agent');",
              "    ",
              "    // Verify customer properties",
              "    pm.expect(jsonData.customer).to.have.property('name');",
              "    pm.expect(jsonData.customer).to.have.property('callSid');",
              "    pm.expect(jsonData.customer.callSid).to.match(/^CA[a-f0-9]{32}$/);",
              "    ",
              "    // Verify agent properties",
              "    pm.expect(jsonData.agent).to.have.property('name');",
              "    pm.expect(jsonData.agent).to.have.property('callSid');",
              "    pm.expect(jsonData.agent.callSid).to.match(/^CA[a-f0-9]{32}$/);",
              "    ",
              "    // Save call SIDs for validation",
              "    pm.environment.set('customerCallSid', jsonData.customer.callSid);",
              "    pm.environment.set('agentCallSid', jsonData.agent.callSid);",
              "});",
              "",
              "pm.test('Timer metadata is provided', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('timer');",
              "    pm.expect(jsonData.timer).to.have.property('scheduled');",
              "    pm.expect(jsonData.timer.scheduled).to.equal(false);",
              "    pm.expect(jsonData.timer).to.have.property('note');",
              "    pm.expect(jsonData.timer).to.have.property('timerUrl');",
              "    pm.expect(jsonData.timer).to.have.property('suggestedTerminateAt');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "auth": {
          "type": "basic",
          "basic": [
            {
              "key": "username",
              "value": "{{TWILIO_ACCOUNT_SID}}",
              "type": "string"
            },
            {
              "key": "password",
              "value": "{{TWILIO_AUTH_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/x-www-form-urlencoded"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "agentPhoneNumber",
              "value": "{{AGENT_PHONE_NUMBER}}",
              "type": "text"
            },
            {
              "key": "strategy",
              "value": "random",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{BASE_URL}}/create-conference",
          "host": ["{{BASE_URL}}"],
          "path": ["create-conference"]
        },
        "description": "Creates a new Twilio conference with randomly selected customer and agent personas"
      }
    },
    {
      "name": "Get Conference Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200 OK', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Conference status response is valid', function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Verify conference SID",
              "    pm.expect(jsonData).to.have.property('sid');",
              "    pm.expect(jsonData.sid).to.match(/^CF[a-f0-9]{32}$/);",
              "    ",
              "    // Verify status field",
              "    pm.expect(jsonData).to.have.property('status');",
              "    pm.expect(jsonData.status).to.be.oneOf(['init', 'in-progress', 'completed']);",
              "    ",
              "    // Verify friendly name",
              "    pm.expect(jsonData).to.have.property('friendly_name');",
              "    ",
              "    console.log('Conference Status:', jsonData.status);",
              "    console.log('Friendly Name:', jsonData.friendly_name);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "auth": {
          "type": "basic",
          "basic": [
            {
              "key": "username",
              "value": "{{TWILIO_ACCOUNT_SID}}",
              "type": "string"
            },
            {
              "key": "password",
              "value": "{{TWILIO_AUTH_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "https://api.twilio.com/2010-04-01/Accounts/{{TWILIO_ACCOUNT_SID}}/Conferences/{{conferenceId}}.json",
          "protocol": "https",
          "host": ["api", "twilio", "com"],
          "path": [
            "2010-04-01",
            "Accounts",
            "{{TWILIO_ACCOUNT_SID}}",
            "Conferences",
            "{{conferenceId}}.json"
          ]
        },
        "description": "Fetches conference status from Twilio REST API using the conference SID saved from the Create Conference request"
      }
    },
    {
      "name": "Terminate Conference",
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200 OK', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Conference termination response is valid', function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Test passes if either:",
              "    // 1. Termination succeeded (action is terminated or already_completed)",
              "    // 2. Or ConferenceSid validation failed (expected for tests without real SID)",
              "    if (jsonData.success === true) {",
              "        pm.expect(jsonData.action).to.be.oneOf(['terminated', 'already_completed']);",
              "        pm.expect(jsonData).to.have.property('conferenceSid');",
              "    } else {",
              "        // Accept validation errors for missing/invalid ConferenceSid",
              "        pm.expect(jsonData).to.have.property('error');",
              "        console.log('Note: Conference termination skipped - no valid ConferenceSid provided');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "auth": {
          "type": "basic",
          "basic": [
            {
              "key": "username",
              "value": "{{TWILIO_ACCOUNT_SID}}",
              "type": "string"
            },
            {
              "key": "password",
              "value": "{{TWILIO_AUTH_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/x-www-form-urlencoded"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "ConferenceSid",
              "value": "{{conferenceSid}}",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{BASE_URL}}/conference-timer",
          "host": ["{{BASE_URL}}"],
          "path": ["conference-timer"]
        },
        "description": "Terminates the conference by updating its status to completed"
      }
    }
  ]
}
