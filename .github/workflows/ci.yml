# ABOUTME: Continuous Integration workflow for agent-assisted pipeline
# ABOUTME: Runs tests, linting, and deployment for Node.js and Python components

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test-node:
    name: Node.js Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Check formatting
      run: npm run format:check
      
    - name: Run unit tests
      run: npm run test:ci
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: nodejs
        name: nodejs-coverage

  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
      
    - name: Install dependencies
      run: uv sync --group test --group dev
      
    - name: Run Python linting
      run: |
        uv run black --check .
        uv run flake8 .
        uv run mypy src --ignore-missing-imports
      
    - name: Run Python tests
      run: uv run pytest --cov --cov-report=xml
      
    - name: Upload Python coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [test-node]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Newman globally
      run: npm install -g newman
      
    - name: Run API tests
      run: npm run test:api:config
      env:
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}

  sync-todos:
    name: Sync Todos with Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Sync todos with GitHub issues
      run: npm run sync-todos
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to Twilio
    runs-on: ubuntu-latest
    needs: [test-node, test-python, api-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Twilio CLI
      run: npm install -g twilio-cli @twilio-labs/plugin-serverless
      
    - name: Deploy to Twilio
      run: npm run twilio:deploy:prod
      env:
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}